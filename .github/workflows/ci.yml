# Phase 6: Continuous Integration Pipeline
# Comprehensive CI/CD workflow for ML forecasting project

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    # Run nightly builds at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.10'
  POETRY_VERSION: '1.6.1'

jobs:
  # =============================================================================
  # CODE QUALITY & SECURITY
  # =============================================================================
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black mypy bandit safety pre-commit
        pip install -r requirements.txt

    - name: Cache pre-commit
      uses: actions/cache@v3
      with:
        path: ~/.cache/pre-commit
        key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}

    - name: Run pre-commit hooks
      run: |
        pre-commit run --all-files
      continue-on-error: true

    - name: Lint with flake8
      run: |
        flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src tests --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics

    - name: Check code formatting with black
      run: |
        black --check src tests

    - name: Type checking with mypy
      run: |
        mypy src --ignore-missing-imports
      continue-on-error: true

    - name: Security scan with bandit
      run: |
        bandit -r src -f json -o bandit-report.json
      continue-on-error: true

    - name: Check for vulnerabilities with safety
      run: |
        safety check --json --output safety-report.json
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  # =============================================================================
  # TESTING MATRIX
  # =============================================================================
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11']
        exclude:
          # Reduce matrix size for faster CI
          - os: windows-latest
            python-version: '3.9'
          - os: macos-latest
            python-version: '3.9'
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-xdist pytest-mock
        pip install -r requirements.txt

    - name: Create test data directories
      run: |
        mkdir -p tests/data/sample
        mkdir -p logs models/trained submissions

    - name: Run unit tests
      run: |
        pytest tests/unit -v --tb=short --cov=src --cov-report=xml --cov-report=term-missing

    - name: Run integration tests
      run: |
        pytest tests/integration -v --tb=short -m "not slow"
      continue-on-error: true

    - name: Run Phase 5 compliance tests
      run: |
        pytest tests/integration/test_phase5_compliance.py -v --tb=short
      continue-on-error: true

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # =============================================================================
  # PERFORMANCE TESTING
  # =============================================================================
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [test]
    if: github.event_name != 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-benchmark memory-profiler
        pip install -r requirements.txt

    - name: Run performance tests
      run: |
        pytest tests/performance -v --benchmark-only --benchmark-json=benchmark.json
      continue-on-error: true

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark.json
        retention-days: 30

  # =============================================================================
  # DOCKER BUILD & TEST
  # =============================================================================
  docker:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [code-quality, test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build Docker image
      run: |
        docker build \
          --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
          --build-arg VCS_REF=${{ github.sha }} \
          --tag hackathon-forecast:${{ github.sha }} \
          --cache-from=type=local,src=/tmp/.buildx-cache \
          --cache-to=type=local,dest=/tmp/.buildx-cache-new \
          .

    - name: Test Docker image
      run: |
        # Test that the image runs
        docker run --rm -d --name test-container hackathon-forecast:${{ github.sha }}
        sleep 10
        docker logs test-container
        docker stop test-container

    - name: Docker Compose test
      run: |
        cp .env.example .env
        docker-compose -f docker-compose.yml config
        # docker-compose up -d --build
        # sleep 30
        # docker-compose ps
        # docker-compose down

    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  # =============================================================================
  # MODEL VALIDATION
  # =============================================================================
  model-validation:
    name: Model Validation
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [test]
    if: github.event_name != 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Setup MLflow tracking
      run: |
        mkdir -p mlruns
        export MLFLOW_TRACKING_URI=file://$(pwd)/mlruns
        python -c "import mlflow; mlflow.create_experiment('ci-validation')"

    - name: Run model validation pipeline
      run: |
        export FORECAST_ENV=testing
        export MLFLOW_TRACKING_URI=file://$(pwd)/mlruns
        python -m src.validation.model_validator
        python test_phase5_compliance.py
      continue-on-error: true

    - name: Generate validation report
      run: |
        python -c "
        from src.validation.model_validator import model_validator
        from src.validation.kpi_system import kpi_manager
        import json

        # Generate reports
        validation_summary = model_validator.get_validation_summary()
        kpi_summary = kpi_manager.get_kpi_summary()

        report = {
            'validation': validation_summary,
            'kpis': kpi_summary,
            'timestamp': '$(date -u +%Y-%m-%dT%H:%M:%SZ)'
        }

        with open('validation-report.json', 'w') as f:
            json.dump(report, f, indent=2)
        "

    - name: Upload validation report
      uses: actions/upload-artifact@v3
      with:
        name: validation-report
        path: validation-report.json
        retention-days: 30

  # =============================================================================
  # DEPLOYMENT (Production)
  # =============================================================================
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [code-quality, test, docker, model-validation]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.CONTAINER_REGISTRY }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Build and push production image
      run: |
        docker build \
          --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
          --build-arg VCS_REF=${{ github.sha }} \
          --tag ${{ secrets.CONTAINER_REGISTRY }}/hackathon-forecast:latest \
          --tag ${{ secrets.CONTAINER_REGISTRY }}/hackathon-forecast:${{ github.sha }} \
          --push \
          .

    - name: Deploy to production
      run: |
        # Add your deployment commands here
        echo "Deploying to production environment"
        # Example: kubectl apply -f k8s/
        # Example: docker-compose -f docker-compose.prod.yml up -d

  # =============================================================================
  # NOTIFICATIONS
  # =============================================================================
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [code-quality, test, docker, model-validation]
    if: always()

    steps:
    - name: Notify Slack on success
      if: needs.test.result == 'success'
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "✅ CI Pipeline passed for ${{ github.ref }}"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify Slack on failure
      if: needs.test.result == 'failure' || needs.code-quality.result == 'failure'
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "❌ CI Pipeline failed for ${{ github.ref }}"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # =============================================================================
  # CLEANUP
  # =============================================================================
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy, notify]
    if: always()

    steps:
    - name: Clean up Docker
      run: |
        docker system prune -af
        docker volume prune -f
      continue-on-error: true